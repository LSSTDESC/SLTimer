language: python

install:
  - sudo apt-get update
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  # We did all of that just so that we ccould conda install pymc:
  - conda install -c https://conda.binstar.org/pymc pymc
  # Now we install all the rest of our python dependencies:
  - pip install -r requirements.txt
  - pip install coveralls
  # And finally we set up SLTimer:
  - source setup/setup.sh
  # Set up to run jupyter notebooks and latex:
  - sudo apt-get install latexmk
  - sudo apt-get install latex-xcolor
  - sudo apt-get install texlive-latex-recommended
  - sudo apt-get install texlive-latex-extra
  - sudo apt-get install texlive-fonts-recommended
  - sudo apt-get install texlive-generic-recommended
  - sudo apt-get install texlive-fonts-extra
  - sudo apt-get install texlive-publishers
  - sudo apt-get install chktex
  - sudo apt-get install dvipng
  - conda install jupyter
  - pip install nbconvert
  # Set up to build docs:
  - pip install sphinx
  - pip install sphinx_rtd_theme

script:
  # Run the unit tests:
  - nosetests -s --with-coverage --cover-package=desc.sltimer
  # Run the demo notebooks:
  # The pycs tutorial seems to take too long...
  # jupyter nbconvert --ExecutePreprocessor.kernel_name=python --ExecutePreprocessor.timeout=600 --to notebook --execute  notebooks/PyCS_Tutorial.ipynb
  - jupyter nbconvert --ExecutePreprocessor.kernel_name=python --ExecutePreprocessor.timeout=600 --to notebook --execute notebooks/SLTimer_Tutorial.ipynb
  - jupyter nbconvert --ExecutePreprocessor.kernel_name=python --ExecutePreprocessor.timeout=600 --to notebook --execute notebooks/SLTimer_TDC2_Example.ipynb
  - jupyter nbconvert --ExecutePreprocessor.kernel_name=python
    --ExecutePreprocessor.timeout=600 --to notebook --execute notebooks/SLTimer_TDC2_Analysis.ipynb
  # Build the docs:
  - sphinx-build -b html -d _build/doctrees docs _build/html
  # Make the PDF of any Notes or papers, and move it to the top level,
  # ready for deployment.
  - FOLDER="docs/desc-0000-sltimer-tdc2_gateway_analysis"
  - PAPER="desc-0000-sltimer-tdc2_gateway_analysis.pdf"
  - make -C "$FOLDER"
  - cp "$FOLDER"/"$PAPER" .
  # Prepare to deploy final and draft versions.
  # 1) If it's the master branch being updated, push to a "pdf" branch.
  # 2) If it's a development branch being updated, push to a "latest"
  # branch named after the dev branch.
  - if [ "$TRAVIS_BRANCH" == "master" ]; then REMOTEBRANCH="pdf" ; fi
  - if [ "$TRAVIS_BRANCH" != "master" ]; then REMOTEBRANCH="latest/$TRAVIS_BRANCH" ; fi

# Finally, deploy the PDF by force-pushing to an otherwise empty
# orphan branch (ie one with no history). This saves the repo from
# bloating. And then run coveralls.
after_success: |
  if [ -n "$GITHUB_API_KEY" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ]; then
    git checkout --orphan "$REMOTEBRANCH"
    git rm -rf .
    git add -f "$PAPER"
    git -c user.name='travis' -c user.email='travis' commit -m init
    git push -q -f https://drphilmarshall:$GITHUB_API_KEY@github.com/DarkEnergyScienceCollaboration/start_paper "$REMOTEBRANCH"
  fi
  - coveralls
